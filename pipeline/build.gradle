dependencies {
    implementation 'junit:junit:4.13.1'
}
sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

task dist(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': 'com.gats.assets.Pipeline'
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

dist.dependsOn classes

sourceSets.main.java.srcDirs = ["src/"]
sourceSets.main.resources.srcDirs = ["res/"]


abstract class CompileAssets extends DefaultTask {

    @InputDirectory
    abstract DirectoryProperty getInputDir()

    @InputFile
    abstract RegularFileProperty getExecutableJar()

    @Internal
    abstract DirectoryProperty getTmpDir()

    @OutputDirectory
    abstract DirectoryProperty getOutputDir()


    @TaskAction
    public void exec() {

        def cmd = ["java",
                   "-jar",
                   executableJar.get().asFile.path,
                   inputDir.get().asFile.path,
                   tmpDir.get().asFile.path,
                   outputDir.get().asFile.path]

        def proc = cmd.execute()
        def sout = new StringBuffer(), serr = new StringBuffer();
        proc.waitForProcessOutput(sout, serr)
        println("exitCode: " + proc.exitValue() + "\t"+ serr.toString());
        println("\toutput: \"" + sout.toString() + "\"");
    }

}


tasks.register('compileAssets', CompileAssets) {

    dependsOn ':pipeline:dist'

    getInputDir().set(rootProject.file('assets/res/').absoluteFile)
    getExecutableJar().set(file('build/libs/pipeline-1.0.jar').absoluteFile)
    getTmpDir().set(file('build/tmp/assets/').absoluteFile)
    getOutputDir().set(rootProject.file('core/resources/').absoluteFile)
}



